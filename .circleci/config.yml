version: 2.1

dockernodejs: &dockernodejs
  docker:
    - image: cimg/node:lts
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD

dockeransible: &dockeransible
  docker:
    - image: circleci/python:latest
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD

dockeraws: &dockeraws
  docker:
    - image: amazon/aws-cli
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD

orbs:
  node: circleci/node@4.1.0
  slack: circleci/slack@4.0.2

#              curl -H "Content-Type: text/plain" -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request PUT --data "http://$BACKEND_IP_ADDRESS:3030" https://api.memstash.io/values/backend-url
#              curl -H "Content-Type: text/plain" -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request PUT --data "" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}

commands:
  sayhello:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Hello World"
    steps:
      - run: echo << parameters.to >>

  memstash-write:
    description: Write data (key + value) to memstash.io.
    parameters:
      key:
        type: string
      value:
        type: string
      token:
        type: env_var_name
        default: MEMSTASH_TOKEN
    steps:
      - run:
          name: Send data to memstash.io
          command: |
            curl -H "Content-Type: text/plain" -H "token: << parameters.token >>" --request PUT --data "<< parameters.value >>" https://api.memstash.io/values/<< parameters.key >>
            exit 0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.workflowid>>"
            exit 0

    #  aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflowid>>"
    #  aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflowid>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$?
            if test "$SUCCESS" == "1";
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    <<: *dockernodejs
    steps:
      - checkout
      - run:
          name: Check node version
          command: |
            node --version
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/frontend
          cache-path: ~/project/frontend/node_modules
          override-ci-command: npm install
      - run:
          name: Run frontend build
          command: |
            cd ~/project/frontend && npm run build
  #      - slack/notify:
  #          custom: |
  #            {
  #              "blocks": [
  #                {
  #                  "type": "section",
  #                  "fields": [
  #                    {
  #                      "type": "plain_text",
  #                      "text": "*This is a text notification*",
  #                      "emoji": true
  #                    }
  #                  ]
  #                }
  #              ]
  #            }
  #          event: always

  #      - restore_cache:
  #          keys: [frontend-build]
  #      - run:
  #          name: Build front-end
  #          command: |
  #            # Your code here
  #            exit 1
  #      - save_cache:
  #          paths: [frontend/node_modules]
  #          key: frontend-build

  build-backend:
    <<: *dockernodejs
    steps:
      - checkout
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/backend
          cache-path: ~/project/backend/node_modules
          override-ci-command: npm install
      - run:
          name: Run backend build
          command: |
            cd ~/project/backend && npm run build

  #      - restore_cache:
  #          keys: [backend-build]
  #      - run:
  #          name: Back-end build
  #          command: |
  #             # Your code here
  #             exit 1
  #      - save_cache:
  #          paths: [backend/node_modules]
  #          key: backend-build

  test-frontend:
    <<: *dockernodejs
    steps:
      # Restore from cache
      - checkout
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/frontend
          cache-path: ~/project/frontend/node_modules
          override-ci-command: npm install
      - run:
          name: Run frontend build
          command: |
            cd ~/project/frontend && npm run build
      - run:
          name: Run frontend test
          command: |
            cd ~/project/frontend && npm run test
      - store_test_results:
          path: frontend/coverage
      - store_artifacts:
          path: frontend/coverage
      - slack/notify:
          event: fail
          mentions: '@Rudger'
          template: basic_fail_1
  #      - slack/notify:
  #          event: pass
  #          template: success_tagged_deploy_1

  test-backend:
    <<: *dockernodejs
    steps:
      - checkout
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/backend
          cache-path: ~/project/backend/node_modules
          override-ci-command: npm install
      - run:
          name: Run backend unit tests
          command: |
            cd ~/project/backend && npm run test
      - store_test_results:
          path: ~/project/backend/coverage
      - store_artifacts:
          path: ~/project/backend/coverage
      - slack/notify:
          event: fail
          mentions: '@Rudger'
          template: basic_fail_1

  scan-frontend:
    <<: *dockernodejs
    steps:
      - checkout
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/frontend
          cache-path: ~/project/frontend/node_modules
          override-ci-command: npm install
      - run:
          name: Run frontend scan
          command: |
            cd ~/project/frontend && npm audit --audit-level=critical
      - store_test_results:
          path: frontend/coverage
      - store_artifacts:
          path: frontend/coverage

  scan-backend:
    <<: *dockernodejs
    steps:
      - checkout
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/backend
          cache-path: ~/project/backend/node_modules
          override-ci-command: npm install
      - run:
          name: Run backend scan
          command: |
            cd ~/project/backend && npm audit --audit-level=critical
      - store_test_results:
          path: backend/coverage
      - store_artifacts:
          path: backend/coverage

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            set -ex
            yum update -y
            yum install jq -y
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            set -ex
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            set -ex
            echo "[web]" > .circleci/ansible/inventory.txt
            export BACKEND_IP_ADDRESS="$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=Udapeople" \
                --output text | tail -1)"
            echo "$BACKEND_IP_ADDRESS" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo "export BACKEND_IP_ADDRESS=\"$BACKEND_IP_ADDRESS\"" >> $BASH_ENV
            curl -H "Content-Type: text/plain" -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request PUT --data "http://$BACKEND_IP_ADDRESS:3030" https://api.memstash.io/values/backend-url
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - .circleci/ansible/inventory.txt
      - run:
          name: Add backend-url to memory
          command: |
            curl -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request GET https://api.memstash.io/values/backend-url
      - destroy-environment:
          workflowid: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    <<: *dockeransible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:13:a2:a6:29:74:29:bc:3a:1f:e5:69:17:b6:ed:3e"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            whoami
            sudo apt -y update
            sudo apt install -y ca-certificates software-properties-common python3
            sudo pip3 install ansible
            sudo pip3 install awscliv2
      - run:
          name: Configure server
          command: |
            set -ex
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook .circleci/ansible/configure-server.yml -i /tmp/workspace/project/.circleci/ansible/inventory.txt --verbose
            EXIT_CODE=$?
            echo "$EXIT_CODE"
            exit $EXIT_CODE
      - destroy-environment:
          workflowid: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    <<: *dockernodejs
    steps:
      - checkout
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/backend
          cache-path: ~/project/backend/node_modules
          override-ci-command: npm install
      - run:
          name: Run backend build
          command: |
            set -x
            cd ~/project/backend
            npm install
            npm run build
      - run:
          name: Run migrations
          command: |
            set -x
            npm install -g ts-node
            npm install -g typeorm
            cd ~/project/backend
            typeorm version
            envsubst < ~/project/.circleci/tpl/env.template > .env
            npm run migrations > /tmp/output-migrations.log
            cat /tmp/output-migrations.log
            grep 'executed\ successfully' /tmp/output-migrations.log
          no_output_timeout: 30m
      - memstash-write:
          key: "migration_${CIRCLE_WORKFLOW_ID}"
          value: "success"
      - run:
          name: Show result on success
          command: |
            set -ex
            echo "success"
            cat /tmp/output-migrations.log
      - run:
          name: Show result when on failure
          command: |
            set -x
            echo "failure"
            cat /tmp/output-migrations.log
            cd ~/project/backend && npm run migrations:revert
          when: on_fail

  deploy-frontend:
    <<: *dockeraws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    <<: *dockeransible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:13:a2:a6:29:74:29:bc:3a:1f:e5:69:17:b6:ed:3e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  smoke-test:
    <<: *dockeraws
      # Lightweight Docker image
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    <<: *dockeraws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cleanup:
      <<: *dockernodejs
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [deploy-infrastructure]

#  default:
#    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]

