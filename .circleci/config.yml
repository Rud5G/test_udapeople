version: 2.1

dockernodejs: &dockernodejs
  docker:
    - image: cimg/node:lts
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD

dockeransible: &dockeransible
  docker:
    - image: circleci/python
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD

dockeraws: &dockeraws
  docker:
    - image: amazon/aws-cli
      auth:
        username: $DOCKERHUB_USERNAME
        password: $DOCKERHUB_PASSWORD

globalenvvars: &globalenvvars
  environment:
    MEMSTASH_TOKEN: 94fdaf18-8f2a-49d0-8a5f-632781e436de

orbs:
  node: circleci/node@4.1.0
  slack: circleci/slack@4.0.2

  #              curl -H "Content-Type: text/plain" -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request PUT --data "http://$BACKEND_IP_ADDRESS:3030" https://api.memstash.io/values/backend-url
  #              curl -H "Content-Type: text/plain" -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request PUT --data "" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}

commands:
  sayhello:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Hello World"
    steps:
      - run: echo << parameters.to >>

  memstash-write:
    description: Write data (key + value) to memstash.io.
    parameters:
      key:
        type: string
      value:
        type: string
      token:
        type: env_var_name
        default: MEMSTASH_TOKEN
    steps:
      - run:
          name: Send data to memstash.io
          command: |
            set -ex
            curl -H "Content-Type: text/plain" -H "token: << parameters.token >>" --request PUT --data "<< parameters.value >>" https://api.memstash.io/values/<< parameters.key >>
      #${CIRCLE_PROJECT_REPONAME}_${CIRCLE_BRANCH}_

  memstash-read:
    description: Read data (value) from memstash.io by key.
    parameters:
      key:
        type: string
      token:
        type: env_var_name
        default: MEMSTASH_TOKEN
    steps:
      - run:
          name: Read data from memstash.io
          command: |
            set -ex
            MEMSTASH_VALUE=$(curl -H "Content-Type: text/plain" -H "token: << parameters.token >>" --request GET https://api.memstash.io/values/<< parameters.key >>)
            MEMSTASH_KEY=<< parameters.key >>
            echo "export $MEMSTASH_KEY=\"$MEMSTASH_VALUE\"" >> $BASH_ENV
            source $BASH_ENV
            echo $MY_ENV

  run-command:
    parameters:
      NUM:
        type: string
    steps:
      - checkout
      - run:
          command: |
            echo "export MY_ENV=MY_<< parameters.NUM >>_ENV" >> $BASH_ENV
            source $BASH_ENV
            echo $MY_ENV


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.workflowid>>"

    #  aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflowid>>"
    #  aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflowid>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$?
            if test "$SUCCESS" == "1";
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi


jobs:

  build-backend:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-backend-build-{{ .Branch }}
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            envsubst < ~/project/.circleci/tpl/env.template > .env
            npm install
            npm run build
      - save_cache:
          paths:
            - ~/.npm
            - backend/node_modules
          key: v1-backend-build-{{ .Branch }}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
            - project/backend/dist

  build-frontend:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-frontend-build-{{ .Branch }}-{{ checksum "~/project/frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - ~/.npm
            - frontend/node_modules
          key: v1-frontend-build-{{ .Branch }}-{{ checksum "~/project/frontend/package-lock.json" }}

  test-frontend:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-frontend-build-{{ .Branch }}-{{ checksum "~/project/frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - run:
          name: Run frontend test
          command: |
            cd ~/project/frontend
            npm run test
      - store_test_results:
          path: ~/project/frontend/coverage
      - store_artifacts:
          path: ~/project/frontend/coverage
      - slack/notify:
          event: fail
          mentions: '@Rudger'
          template: basic_fail_1

  test-backend:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-backend-build-{{ .Branch }}
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install
            npm run build
      - run:
          name: Run backend unit tests
          command: |
            cd ~/project/backend
            npm run test
      - store_test_results:
          path: ~/project/backend/coverage
      - store_artifacts:
          path: ~/project/backend/coverage
      - slack/notify:
          event: fail
          mentions: '@Rudger'
          template: basic_fail_1

  scan-frontend:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-frontend-build-{{ .Branch }}-{{ checksum "~/project/frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - run:
          name: Run frontend scan
          command: |
            cd ~/project/frontend
            npm audit --audit-level=critical
      - store_test_results:
          path: ~/project/frontend/coverage
      - store_artifacts:
          path: ~/project/frontend/coverage
          destination: artifact-frontend-coverage

  scan-backend:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-backend-build-{{ .Branch }}
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install
            npm run build
      - run:
          name: Run backend scan
          command: |
            cd ~/project/backend
            npm audit --audit-level=critical
      - store_test_results:
          path: ~/project/backend/coverage
      - store_artifacts:
          path: ~/project/backend/coverage
          destination: artifact-backend-coverage

  deploy-infrastructure:
    <<: *dockeraws
    <<: *globalenvvars
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            set -ex
            yum update -y
            yum install jq -y
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            set -ex
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            set -ex
            echo "[web]" > .circleci/ansible/inventory.txt
            export BACKEND_IP_ADDRESS="$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=Udapeople" \
                --output text | tail -1)"
            echo "$BACKEND_IP_ADDRESS" >> .circleci/ansible/inventory.txt
            echo "export BACKEND_IP_ADDRESS=\"$BACKEND_IP_ADDRESS\"" >> $BASH_ENV
      - memstash-write:
          key: "backend_url"
          value: "http://${BACKEND_IP_ADDRESS}:3030"
          token: MEMSTASH_TOKEN
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Add backend-url to memory
          command: |
            curl -H "token: 94fdaf18-8f2a-49d0-8a5f-632781e436de" --request GET https://api.memstash.io/values/backend-url
      - destroy-environment:
          workflowid: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    <<: *dockeransible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:13:a2:a6:29:74:29:bc:3a:1f:e5:69:17:b6:ed:3e"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy inventory to workspace
          command: |
            set -ex
            cp /tmp/workspace/project/.circleci/ansible/inventory.txt .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            sudo apt install -y ca-certificates software-properties-common python3
            sudo pip3 install ansible
            sudo pip3 install awscliv2
      - run:
          name: Configure server
          command: |
            set -ex
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -v -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            EXIT_CODE=$?
            echo "$EXIT_CODE"
            exit $EXIT_CODE
      - destroy-environment:
          workflowid: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          workflowid: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    <<: *dockernodejs
    steps:
      - checkout
      - restore_cache:
          keys: v1-backend-build-{{ .Branch }}
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            envsubst < ~/project/.circleci/tpl/env.template > .env
            npm install
            npm run build
      - run:
          name: Install typescript + ts-node
          command: |
            set -x
            sudo npm install -g typescript
            sudo npm install -g ts-node
      - run:
          name: Run migrations
          command: |
            set -x
            cd ~/project/backend
            ts-node node_modules/typeorm/cli.js version
            ts-node node_modules/typeorm/cli.js migration:show
            npm run migrations > /tmp/output-migrations.log
            cat /tmp/output-migrations.log
            grep 'executed\ successfully' /tmp/output-migrations.log || echo "no success grepped"
          no_output_timeout: 30m
      - memstash-write:
          key: "migration_${CIRCLE_WORKFLOW_ID}"
          value: "success"
      - run:
          name: Show result on success
          command: |
            set -ex
            echo "success"
            cat /tmp/output-migrations.log
      - run:
          name: Show result when on failure
          command: |
            cat /tmp/output-migrations.log
          when: on_fail

  deploy-frontend:
    <<: *dockeraws
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:13:a2:a6:29:74:29:bc:3a:1f:e5:69:17:b6:ed:3e"]
      - run:
          name: Install dependencies
          command: |
            set -ex
            yum update -y
            yum install jq -y
            yum install tar -y
            yum install gzip -y
            yum install perl -y
            yum install which -y
            yum install gettext -y
      - run:
          name: Install Node + NPM
          command: |
            set -ex
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
            NVM_DIR="$HOME/.nvm"
            echo "export NVM_DIR=\"$HOME/.nvm\"" >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && \. \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
            source $BASH_ENV
            nvm install --lts
            nvm use --lts
            echo "export PATH=\"$PATH\"" >> $BASH_ENV
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/frontend
          cache-path: ~/project/frontend/node_modules
          override-ci-command: npm install
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Get backend url
          command: |
            set -ex
            export BACKEND_IP="$(tail -n1 /tmp/workspace/project/.circleci/ansible/inventory.txt)"
            echo "export API_URL=\"http://${BACKEND_IP}:3030\"" >> $BASH_ENV
            source $BASH_ENV
            echo "${API_URL}"
      - run:
          name: Frontend build
          command: |
            set -ex
            echo "${API_URL}"
            cd ~/project/frontend
            npm install
            envsubst < ~/project/.circleci/tpl/env.template | grep -v TYPEORM > ./.env
            echo "API_URL=\"$API_URL\"" >> ./.env
            npm run build
      - save_cache:
          paths:
            - ~/.nvm
            - ~/.npm
            - frontend/node_modules
          key: v1-deploy-frontend-{{ .Branch }}-{{ checksum "~/project/frontend/package-lock.json" }}
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive

  deploy-backend:
    <<: *dockeransible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:13:a2:a6:29:74:29:bc:3a:1f:e5:69:17:b6:ed:3e"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy tmp-workspace to workspace
          command: |
            set -x
            cp /tmp/workspace/project/.circleci/ansible/inventory.txt .circleci/ansible/inventory.txt
            cp -pr /tmp/workspace/project/backend/dist backend/dist
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update
            sudo apt install -y ca-certificates software-properties-common python3 rsync tree
            sudo pip3 install ansible
            sudo pip3 install awscliv2
      - run:
          name: Deploy backend
          command: |
            set -ex
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -v -i .circleci/ansible/inventory.txt -e BACKEND_CODE=$(pwd)/backend .circleci/ansible/deploy-backend.yml
            EXIT_CODE=$?
            echo "$EXIT_CODE"
            exit $EXIT_CODE
      # Here's where you will add some code to rollback on failure

  smoke-test:
    <<: *dockeraws
    <<: *globalenvvars
    steps:
      - run:
          name: Install dependencies
          command: |
            set -ex
            yum update -y
            yum install curl -y
            yum install jq -y
            yum install tar -y
            yum install gzip -y
            yum install perl -y
            yum install which -y
            yum install gettext -y
      - memstash-read:
          key: "backend_url"
          token: MEMSTASH_TOKEN
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$backend_url
            echo "$BACKEND_URL"
      - run:
          name: Backend smoke test.
          command: |
            set -ex
            export BACKEND_STATUS_ENDPOINT="${BACKEND_URL}/api/status"
            if test "$(curl -s "${BACKEND_STATUS_ENDPOINT}")" == "1";
            then
              exit 1
            else
              exit 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            set -ex
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl "${FRONTEND_URL}" | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    <<: *dockeraws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cleanup:
      <<: *dockernodejs
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi



workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - deploy-infrastructure:
          requires: [build-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-backend:
          requires: [build-backend, configure-infrastructure]
      - run-migrations:
          requires: [deploy-backend]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

#      - deploy-frontend:
#          requires: [ build-frontend ]
#          requires: [build-frontend, configure-infrastructure]

#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [test-backend]
#      - scan-frontend:
#          requires: [test-frontend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [deploy-infrastructure]

#  default:
#    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]

