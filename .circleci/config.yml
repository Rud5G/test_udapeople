version: 2.1

orbs:
  node: circleci/node@4.1.0

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:
commands:
  sayhello:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Hello World"
    steps:
      - run: echo << parameters.to >>

  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run: aws cloudformation delete-stack --stack-name "prod-${CIRCLE_WORKFLOW_ID}"

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-backend:
    #docker:
    #  - image: amazon/aws-cli
    # working_directory: ~/test_udapeople
    # Reuse Docker container specification given by the node Orb
    executor: node/default
    steps:
      - checkout
      # - node/install
      - run:
          name: Check node version
          command: |
            node --version
      - node/install-npm
      - node/install-packages:
          app-dir: ~/project/backend
          cache-path: ~/project/backend/node_modules
          override-ci-command: npm install
      - run: npm run build

#  build-backendx:
#    docker:
#      - image: amazon/aws-cli
#    steps:
#      - checkout
#      - restore_cache:
#          keys:
#          - deps-{{ checksum "requirements.txt" }}
#      - run: mkdir -p ~/.cache/pip
#      - run: sudo pip install --cache-dir ~/.cache/pip -q -r requirements.txt
#      - save_cache:
#          key: deps-{{ checksum "requirements.txt" }}
#          paths:
#          - ~/.cache/pip
#
#      - node/install-npm
#      - run:
#          name: Backend build
#          command: |
#            cd backend && npm i && npm run build


#  build-frontend:
#    docker:
#      - image: amazon/aws-cli
#    steps:
#      - checkout
#      - node/install-npm
#      - run:
#          name: Frontend build
#          command: |
#            cd frontend && npm i && npm run build

#  build-backend:

#  build-frontend:

#  test-frontend:

#  est-backend:

#  can-frontend:

#  scan-backend:

#  deploy-infrastructure:

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-backend
#      - build-frontend

